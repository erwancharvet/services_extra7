<?php

/**
 * Implements hook_services_resources().
 */
function se_backup_migrate_services_resources() {
  $resources = array();

  $resources['backup_migrate'] = array(
    'index' => array(
      'callback' => 'backup_migrate_index',
      'access arguments' => array('administer nodes'),
      'access arguments append' => FALSE,
    ),
    'create' => array(
      'callback' => 'backup_migrate_quickbackup_create',
      'args' => array(
        array(
          'name' => 'backup_migrate',
          'optional' => FALSE,
          'source' => 'data',
          'description' => 'Quick Backup',
          'type' => 'array',
        ),
      ),
      'access callback' => 'backup_migrate_resource_access',
      'access arguments' => array('create'),
      'access arguments append' => TRUE,
    ),
  );

  $resources['backup_migrate_destination'] = array(
    'index' => array(
      'callback' => 'backup_migrate_destination_index',
      'access arguments' => array('administer nodes'),
      'access arguments append' => FALSE,
    ),
    'create' => array(
      'callback' => 'backup_migrate_backup_restore_or_delete',
      'args' => array(
        array(
          'name' => 'backup_migrate_restore',
          'optional' => FALSE,
          'source' => 'data',
          'description' => 'Backup Restore',
          'type' => 'array',
        ),
      ),
      'access callback' => 'backup_migrate_destination_resource_access',
      'access arguments' => array('create'),
      'access arguments append' => TRUE,
    ),
    'retrieve' => array(
      'callback' => 'backup_migrate_destination_display_files',
      'args' => array(
        array(
          'name' => 'destination_id',
          'optional' => FALSE,
          'source' => array('path' => 0),
          'type' => 'string',
          'description' => 'The destination id of the display files',
        ),
      ),
      'access callback' => 'backup_migrate_destination_resource_access',
      'access arguments' => array('view'),
      'access arguments append' => TRUE,
    ),
  );

  return $resources;
}


/**
 * Gets access rules.
 *
 * @param string $op
 *  $op - Permission requested.
 * @return Boolean
 *  Boolean TRUE if the current user has the requested permission.
 */
function backup_migrate_resource_access($op = 'view', $args = array()) {
  switch ($op) {
    case 'view':
      return user_access('perform backup');
      break;
    case 'create':
      return user_access('access backup and migrate');
      break;
  }
}

/**
 * Returns list of available Sources, Destinations and Profiles . 
 *
 * @return
 *   list of available Sources, Destinations and Profiles.
 */
function backup_migrate_index() { 
  module_load_include('inc', 'backup_migrate', 'includes/destinations');
  module_load_include('inc', 'backup_migrate', 'includes/profiles');
  $list = array();
  $list['source_list'] = _backup_migrate_get_destination_form_item_options('source');
  $destinations = _backup_migrate_get_destination_form_item_options('manual backup');
  if ($destinations) {
    foreach ($destinations as $key => $val) {
      if ($key != 'download') {
        $opt[$key] = $val;
      }
    }
    $list['destination_list'] = $opt;
  }
  $list['profile_list'] = _backup_migrate_get_profile_form_item_options();
  return $list;
}

function backup_migrate_quickbackup_create($quick_backup) { 
  module_load_include('inc', 'backup_migrate', 'includes/profiles');
  module_load_include('inc', 'backup_migrate', 'includes/destinations');
  if (user_access('perform backup')) {
    // For a quick backup use the default settings.
    $settings = _backup_migrate_profile_saved_default_profile($quick_backup['profile_id']);

    // Set the destination to the one chosen in the pulldown.
    $settings->destination_id = $quick_backup['destination_id'];
    $settings->source_id = $quick_backup['source_id'];

    // Save the settings for next time.
    variable_set("backup_migrate_source_id", $quick_backup['source_id']);
    variable_set("backup_migrate_destination_id", $quick_backup['destination_id']);
    variable_set("backup_migrate_profile_id", $quick_backup['profile_id']);
    
    // Do the backup.
    
    $backup_info = backup_migrate_perform_backup($settings); 
    
    $file = $backup_info->file_info['filename'];
    $dest = $settings->get_destination_name();
    $source = $settings->get_source_name();
    $time = timer_stop('backup_migrate_backup');
    $action = !empty($settings->performed_action) ? $settings->performed_action : '';
    //@todo : replace with t().
    $backup_message['backup_file'] = 'Default Database backed up successfully to '.$file.' in destination Filer Directory in '.$time['time'].' ms. '. $action;
    return $backup_message;
  }
  else {
    return services_error("Please try again..",406,null);
  }
}

/**
 * Gets access rules.
 *
 * @param string $op
 *  $op - Permission requested.
 * @return Boolean
 *  Boolean TRUE if the current user has the requested permission.
 */
function backup_migrate_destination_resource_access($op = 'view', $args = array()) {
  switch ($op) {
    case 'view':
      return user_access('administer backup and migrate');
      break;
    case 'create':
      return user_access('administer backup and migrate');
      break;
  }
}

/**
 * Returns list of destinations. 
 *
 * @return
 *   list of destinations.
 */

function backup_migrate_destination_index() { 
  module_load_include('inc', 'backup_migrate', 'includes/crud');
  $class = new backup_migrate_destination;

  if ($type = backup_migrate_crud_type_load('destination')) {
    $items = $class->all_items();
    $rows = array();
    foreach ($items as $item) {
      if ($row = $item->get_list_row()) { 
        $row['id'] = $item->destination_id;
        $rows[] = $row;
      }
    } 
    return $rows;
  } 
}

/**
 * Returns backup files in the given destination.
 * @param $destination_id
 *  $destination_id - destination_id (manual, scheduled, etc).
 * @return
 *   list of destination files.
 */
function backup_migrate_destination_display_files($destination_id = NULL) { 
  module_load_include('inc', 'backup_migrate', 'includes/destinations'); 
  $rows = $sort = array();

  if ($destination = backup_migrate_get_destination($destination_id)) {

    $files = $destination->list_files();

    foreach ((array)$files as $file) {
      $info = $file->info();
      // Show only files that can be restored from.
      if ($file->is_recognized_type()) {
        $sort[] = $info['filetime'];
        $rows[] = array(
          'filename' => check_plain($info['filename']),
          'date_time' => format_date($info['filetime'], 'small'),
          'age' => format_interval(time() - $info['filetime'], 1),
          'size' => format_size($info['filesize']),
          'file_id' => $file->file_id(),
        );
      }
    }
    array_multisort($sort, SORT_DESC, $rows);
    if ($rows) {
      return $rows;
    }
    else {
      return services_error(t('There are no backup files available.'), 406, null);
    }
  }
}


/**
 * Returns success message on restore or delete else service error.
 * @param $data
 *  $data - restore or delete data (like filename, destination_id, etc..).
 * @return
 *   success message or service error.
 */
function backup_migrate_backup_restore_or_delete($data) {
  module_load_include('inc', 'backup_migrate', 'includes/filters'); 
  module_load_include('inc', 'backup_migrate', 'includes/crud'); 
  module_load_include('inc', 'backup_migrate', 'includes/destinations'); 

  global $user;
  $destination_id = $data['data']['destination_id']; 
  $file = $data['data']['filename'].'.mysql.gz'; //@todo : Use file_id
  $settings = array();

  switch($data['data']['op']) {
    case 'Delete':
      backup_migrate_destination_delete_file($destination_id, $file);
      $message['backup_migrate'] = array(
        'message' => "Database backup file deleted: ". $file,
      );
      return $message;
    case 'Restore':
      if (backup_migrate_destination_file_exists($destination_id, $file)) {  
         $advance_settings = backup_migrate_filters_settings_form(backup_migrate_filters_settings_default('restore'), 'restore');
//@todo : use backup_migrate_perform_restore
         $form_state['values']['op'] = 'Restore';
         $form_state['values']['destination_id'] = $destination_id;
         $form_state['values']['file_id'] = $file;
         $form_state['values']['source_id'] = 'db';
         $form_state['values']['confirm'] = 1;
         $form_state['values']['filter']['utils_site_offline'] = 0;
         $form_state['values']['filter']['utils_site_offline_message'] = $advance_settings['advanced']['utils_site_offline_message']['#default_value'];

         drupal_form_submit('backup_migrate_ui_destination_restore_file_confirm', $form_state, $destination_id, $file);
         
         if ($error = form_get_errors()) {
           return services_error(implode(" ", $errors), 406, array('form_errors' => $errors));
         }
         $message['backup_migrate'] = array(
           'message' => "Default Database restored from Filer Directory file ". $file,
         );
         return $message;
      }
      else {
        return services_error('File '. $file .' from the destination '. $destination_id .' is not exists.', 404, null);
      }
   } 
}
